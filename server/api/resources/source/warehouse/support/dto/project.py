"""
Module, providing a DAO api for accessing metadata on warehouse projects

Warehoused data was generated by, or is owned by one or more project
groups

Copyright (C) 2016 ERT Inc.
"""
import sqlalchemy

from api.resources.source.warehouse.support import dto_util

TABLE = "project"
# support table,containing the list of warehoused projects

class ValidateTypeError(TypeError):
    """
    Type of a Warehouse metadata project is not a dictionary
    """
    pass
class ValidateMissingValue(ValueError):
    """
    A required, warehouse metadata Project attribute is absent
    """
    pass
class ValidateUnexpectedValue(ValueError):
    """
    Unrecognized, warehouse Project attribute encountered
    """
    pass

def validate( project):
    """
    validate if object conforms to api for warehouse projects

    Keyword Parameters:
    project -- dictionary representing a warehoused project

    Exceptions:
    ValidateTypeError -- raised when project parameter is not a
      dictionary
    ValidateMissingValue -- raised when project parameter is incomplete
    ValidateUnexpectedValue -- raised when project parameter is
      malformed

    >>> import datetime
    >>> from copy import deepcopy
    >>> proj1 = { 'name': 'project1', 'title':'Amazing Project: Uno'
    ...          ,'inport_id': 12, 'uuid': None}
    >>> validate( proj1)
    True
    >>> validate( '{"name":"project1","title":"A string!"}')
    Traceback (most recent call last):
       ...
    api.resources.source.warehouse.support.dto.project.ValidateTypeError: <class 'str'>
    >>> partial = deepcopy(proj1); removed = partial.pop('title')
    >>> validate( partial)
    Traceback (most recent call last):
       ...
    api.resources.source.warehouse.support.dto.project.ValidateMissingValue: title
    >>> extra = deepcopy(proj1); extra['shouldnt_be_here!'] = True
    >>> validate( extra)
    Traceback (most recent call last):
       ...
    api.resources.source.warehouse.support.dto.project.ValidateUnexpectedValue: shouldnt_be_here!
    """    
    # verify object type
    if not isinstance( project, dict):
        raise ValidateTypeError( type(project))
    # verify object contents
    expected_keys = ['name', 'title', 'inport_id', 'uuid']
    for key in expected_keys: #check that *all* attributes are present
        if key not in project.keys():
            raise ValidateMissingValue( key)
    for key in project.keys(): #check for any non-standard attributes
        if key not in expected_keys:
            raise ValidateUnexpectedValue( key)
    # must be good!
    return True

def get_all( db_url=None, connection_func=None):
    """
    retrive the current list of projects from the warehouse support schema.

    Keyword Parameters:
    db_url  --  String, representing a SQLAlchemy connection (Required, if
      parameter 'connection' is not provided.
    connection_func  -- function returning SQLAlchemy connections
      (Optional, if provided, will override db_url)

    Exceptions:
    ConnectionMissingArgument  -- raised if neither connection or db_url parameter
      is specified.
    ValidateException -- raised when a problem is encountered validating a dto

    >>> get_all()
    Traceback (most recent call last):
       ...
    api.resources.source.warehouse.support.dto_util.ConnectionMissingArgument
    """
    # get db connection
    connection = dto_util.get_connection( db_url, connection_func)
    # prepare statement, to get project metadata
    select_statement = ('SELECT \n'
                        '   p.name \n'
                        '  ,p.title \n'
                        '  ,p.inport_data_set_id AS inport_id \n'
                        '  ,p.csw_uuid AS uuid \n'
                        'FROM {schema}.{table} p \n'
        ).format( schema=dto_util.SCHEMA, table=TABLE)
    try:
        result = connection.execute( select_statement)
        projects = list()
        for row in result:
            project = dict(row)
            validate(project)
            projects.append(project)
        return projects
    except:
        raise
    finally:
        connection.close()

def save( projects, db_url=None, connection_func=None):
    """
    persists a list of one (or more) projects, to the warehouse database

    Keyword Parameters:
    projects  --  list of projects
    db_url  --  String, representing a SQLAlchemy connection (Required,
      if parameter 'connection' is not provided.
    connection_func  -- function returning SQLAlchemy connections
      (Optional, if provided, will override db_url)

    Exceptions:
    ExecMissingArguments  -- raised if neither connection or db_url
      parameter is specified.
    ValidateException -- raised when a problem is encountered validating
      a dto

    >>> import datetime
    >>> empty_list = []
    >>> save( [])
    Traceback (most recent call last):
       ...
    api.resources.source.warehouse.support.dto_util.ExecMissingArgument
    """
    # prepare statement, to write out the project metadata
    template = ('INSERT into {schema}.{table} ( \n'
                '  name \n'
                ' ,title \n'
                ' ,inport_data_set_id \n'
                ' ,csw_uuid \n'
                ' ) values ( \n'
                '  %(name)s --use the same key name, as the type dictionary \n'
                ' ,%(title)s \n'
                ' ,%(inport_id)s \n'
                ' ,%(uuid)s \n'
                ' )')
    insert_statement = template.format( schema=dto_util.SCHEMA, table=TABLE)
    # insert! -- directly use projects dictionaries for binds
    dto_util.exec_base( projects, validate, insert_statement, db_url=db_url
                       ,connection_func=connection_func)
