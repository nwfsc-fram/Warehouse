"""
Python module, providing functions to configure Pentaho carte server

Copyright (C) 2016-2017 ERT Inc.
"""

from xml.etree import ElementTree as etree

__author__ = "Brandon J. Van Vaerenbergh <brandon.vanvaerenbergh@noaa.gov>, "

def generate_config_text( xml_template, host, port, user, encoded_pw
                         ,https_keystore_path, obf_jks_pw
                         ,obf_openssl_pw):
    """
    Returns 'carte-master-config.xml' file contents, with HTTPS conf

    Keyword Parameters:
    xml_template  -- String, representing XML output template without
      correct HTTPS property values
    host  -- String, representing network adapter to listen on
    port  -- int, representing Carte server TCP port 
    user  -- String, representing name for the Carte admin login
    encoded_pw  -- String, representing Pentaho encoded admin pw
    https_keystore_path  -- String, representing absolute path to JKS
      keystore
    obf_jks_pw  -- String, representing JKS keystore password, in Jetty
      obfuscated ("OBF") java format
    obf_openssl_pw  -- String, representing password for OpenSSL secret
      key, encoded in Jetty obfuscated ("OBF") java format

    >>> fake_template = ('<!-- test xml -->\\n'
    ... '<slave_config>\\n'
    ... '    <slaveserver>\\n'
    ... '    <hostname></hostname>\\n'
    ... '    <port></port>\\n'
    ... '    <username></username>\\n'
    ... '    <password></password>\\n'
    ... '    <master>Y</master>\\n'
    ... '    <sslConfig>\\n'
    ... '        <keyStore>something</keyStore>\\n'
    ... '        <keyStorePassword>anything</keyStorePassword>\\n'
    ... '        <keyPassword></keyPassword>\\n'
    ... '    </sslConfig>\\n'
    ... '    </slaveserver>\\n'
    ... '</slave_config>')
    >>> from pprint import pprint
    >>> text = generate_config_text( fake_template, '', '', '', '', ''
    ...                             ,'', '')
    >>> pprint(text)
    ('<slave_config>\\n'
     '    <slaveserver>\\n'
     '    <hostname></hostname>\\n'
     '    <port></port>\\n'
     '    <username></username>\\n'
     '    <password></password>\\n'
     '    <master>Y</master>\\n'
     '    <sslConfig>\\n'
     '        <keyStore></keyStore>\\n'
     '        <keyStorePassword></keyStorePassword>\\n'
     '        <keyPassword></keyPassword>\\n'
     '    </sslConfig>\\n'
     '    </slaveserver>\\n'
     '</slave_config>')
    >>> text = generate_config_text( fake_template, 'a', 1, 'b', 'c'
    ...                             ,'/foo/store.jks','OBF:12345'
    ...                             ,'OBF:abcdef')
    >>> pprint(text)
    ('<slave_config>\\n'
     '    <slaveserver>\\n'
     '    <hostname>a</hostname>\\n'
     '    <port>1</port>\\n'
     '    <username>b</username>\\n'
     '    <password>c</password>\\n'
     '    <master>Y</master>\\n'
     '    <sslConfig>\\n'
     '        <keyStore>/foo/store.jks</keyStore>\\n'
     '        <keyStorePassword>OBF:12345</keyStorePassword>\\n'
     '        <keyPassword>OBF:abcdef</keyPassword>\\n'
     '    </sslConfig>\\n'
     '    </slaveserver>\\n'
     '</slave_config>')
    """    
    template_xml = etree.fromstring(xml_template)
    server_element = template_xml.find('slaveserver')
    # add Server property values
    server_element.find('hostname').text = host
    server_element.find('port').text = str(port)
    server_element.find('username').text = user
    server_element.find('password').text = encoded_pw
    # add HTTPS property values
    ssl_element = server_element.find('sslConfig')
    ssl_element.find('keyStore').text = https_keystore_path
    ssl_element.find('keyStorePassword').text = obf_jks_pw
    ssl_element.find('keyPassword').text = obf_openssl_pw
    return etree.tostring(template_xml, encoding="unicode", short_empty_elements=False)

def generate_properties_text(secret_key_hexstring, additional_properties=None):
    """
    Returns 'kettle.properties' file contents with AES encryption config

    Keyword Parameters:
    secret_key_hexstring  - String, representing a symmetric AES
      encryption key encoded as hexadecimal text
    additional_properties  -- String, representing additional Java
      properties to be appended to end of config (Optional)

    >>> from pprint import pprint
    >>> fake_key = "01001100DEADBEEF"
    >>> out = generate_properties_text(fake_key)
    >>> pprint(out)
    ('# This file was generated by FRAM Data Warehouse\\n'
     '# (based on template from Pentaho Data Integration version 6.1.0.1-196)\\n'
     '#\\n'
     '# Here are a few examples of variables to set:\\n'
     '#\\n'
     '# PRODUCTION_SERVER = hercules\\n'
     '# TEST_SERVER = zeus\\n'
     '# DEVELOPMENT_SERVER = thor\\n'
     '#\\n'
     '# Note: lines like these with a # in front of it are comments\\n'
     '#\\n'
     'KETTLE_PASSWORD_ENCODER_PLUGIN = Aes256_Encrypted\\n'
     'KETTLE_PASSWORD_ENCODER_KEY = 01001100DEADBEEF')
    >>> pprint(generate_properties_text(fake_key, 'myProp=extra'))
    ('# This file was generated by FRAM Data Warehouse\\n'
     '# (based on template from Pentaho Data Integration version 6.1.0.1-196)\\n'
     '#\\n'
     '# Here are a few examples of variables to set:\\n'
     '#\\n'
     '# PRODUCTION_SERVER = hercules\\n'
     '# TEST_SERVER = zeus\\n'
     '# DEVELOPMENT_SERVER = thor\\n'
     '#\\n'
     '# Note: lines like these with a # in front of it are comments\\n'
     '#\\n'
     'KETTLE_PASSWORD_ENCODER_PLUGIN = Aes256_Encrypted\\n'
     'KETTLE_PASSWORD_ENCODER_KEY = 01001100DEADBEEF\\n'
     'myProp=extra')
    """
    template = """# This file was generated by FRAM Data Warehouse
# (based on template from Pentaho Data Integration version 6.1.0.1-196)
#
# Here are a few examples of variables to set:
#
# PRODUCTION_SERVER = hercules
# TEST_SERVER = zeus
# DEVELOPMENT_SERVER = thor
#
# Note: lines like these with a # in front of it are comments
#
KETTLE_PASSWORD_ENCODER_PLUGIN = Aes256_Encrypted
KETTLE_PASSWORD_ENCODER_KEY = {}"""
    properties = template.format(secret_key_hexstring)
    if additional_properties is not None:
        properties += '\n' + additional_properties
    return properties
